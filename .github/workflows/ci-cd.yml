# VervegrandPortal-V2 CI/CD Pipeline - GitHub Actions
name: CI/CD Pipeline

# Pipeline ne zaman çalışsın?
on:
  push:
    branches: [ main, develop ]  # main veya develop branch'e push olunca
  pull_request:
    branches: [ main ]  # Pull request açılınca

# Environment variables (Gizli bilgiler GitHub Secrets'te saklanır)
env:
  PYTHON_VERSION: '3.11'
  STREAMLIT_PORT: 8501

jobs:
  # ============================================
  # JOB 1: Kod Kalitesi Kontrolü
  # ============================================
  code-quality:
    name: 🔍 Kod Kalitesi ve Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Bağımlılıkları Yükle
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint
    
    - name: 🎨 Kod Formatı Kontrolü (Black)
      run: |
        black --check --diff .
      continue-on-error: true  # Format hatası varsa devam et ama bildir
    
    - name: 🔎 Kod Analizi (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  # ============================================
  # JOB 2: Güvenlik Taraması
  # ============================================
  security-scan:
    name: 🔒 Güvenlik Taraması
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔐 Dependency Güvenlik Taraması
      run: |
        pip install safety
        pip install -r requirements.txt
        safety check --json || true
    
    - name: 🕵️ Secret Taraması (API Key, Token sızıntısı)
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # ============================================
  # JOB 3: Unit Testler
  # ============================================
  unit-tests:
    name: 🧪 Unit Testler
    runs-on: ubuntu-latest
    needs: [code-quality]  # Kod kalitesi kontrolünden sonra çalış
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Bağımlılıkları Yükle
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: 🧪 Testleri Çalıştır
      run: |
        # Test dosyaları oluşturulduğunda bu komut çalışacak
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
      continue-on-error: true  # Henüz test yok, devam et
    
    - name: 📊 Test Sonuçlarını Yükle
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      if: always()

  # ============================================
  # JOB 4: Integration Test (API Bağlantı Testi)
  # ============================================
  integration-tests:
    name: 🔗 Entegrasyon Testleri
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Bağımlılıkları Yükle
      run: |
        pip install -r requirements.txt
    
    - name: 🔗 Shopify API Bağlantı Testi
      env:
        SHOPIFY_STORE: ${{ secrets.SHOPIFY_STORE }}
        SHOPIFY_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
      run: |
        python -c "
        from connectors.shopify_api import ShopifyAPI
        import os
        
        # Sadece bağlantı testi (gerçek API çağrısı yapmaz)
        store = os.getenv('SHOPIFY_STORE', 'test-store')
        token = os.getenv('SHOPIFY_TOKEN', 'test-token')
        
        try:
            api = ShopifyAPI(store, token)
            print('✅ ShopifyAPI başarıyla başlatıldı')
        except Exception as e:
            print(f'❌ Hata: {e}')
        "
      continue-on-error: true

  # ============================================
  # JOB 5: Build & Deploy (Sadece main branch)
  # ============================================
  deploy:
    name: 🚀 Deploy (Production)
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Bağımlılıkları Yükle
      run: |
        pip install -r requirements.txt
    
    # SEÇENEK 1: Streamlit Cloud Deploy
    - name: ☁️ Streamlit Cloud'a Deploy
      run: |
        echo "🚀 Streamlit Cloud otomatik deploy ediyor..."
        echo "URL: https://vervegrand-portal.streamlit.app"
      # Not: Streamlit Cloud GitHub entegrasyonu varsa otomatik deploy eder
    
    # SEÇENEK 2: Kendi Sunucunuza Deploy (SSH ile)
    # - name: 🖥️ Sunucuya Deploy (SSH)
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USER }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     script: |
    #       cd /path/to/VervegrandPortal-V2
    #       git pull origin main
    #       pip install -r requirements.txt
    #       pm2 restart streamlit-app
    
    # SEÇENEK 3: Docker Container Deploy
    # - name: 🐳 Docker Build & Push
    #   uses: docker/build-push-action@v5
    #   with:
    #     push: true
    #     tags: vervegrand/portal:latest

  # ============================================
  # JOB 6: Bildirimler
  # ============================================
  notify:
    name: 📢 Bildirim Gönder
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()  # Deploy başarılı/başarısız olsa da bildir
    
    steps:
    - name: 📧 Email Bildirimi
      if: failure()  # Sadece hata varsa
      run: |
        echo "❌ CI/CD Pipeline başarısız!"
        echo "Detaylar: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    # Discord/Slack bildirim örneği
    # - name: 💬 Discord Bildirimi
    #   uses: sarisia/actions-status-discord@v1
    #   if: always()
    #   with:
    #     webhook: ${{ secrets.DISCORD_WEBHOOK }}
    #     status: ${{ job.status }}
    #     title: "VervegrandPortal Deploy"
    #     description: "Build #${{ github.run_number }} tamamlandı"
