"""
üè∑Ô∏è Otomatik Kategori ve Meta Alan G√ºncelleme

√úr√ºn ba≈ülƒ±klarƒ±ndan otomatik kategori tespiti yaparak 
Shopify kategori ve meta alanlarƒ±nƒ± otomatik doldurur.
"""

import streamlit as st
import sys
import os

# Proje ana dizinini path'e ekle
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from connectors.shopify_api import ShopifyAPI
import config_manager
from utils.category_metafield_manager import CategoryMetafieldManager
import logging
import time

st.set_page_config(
    page_title="Otomatik Kategori ve Meta Alan",
    page_icon="üè∑Ô∏è",
    layout="wide"
)

st.title("üè∑Ô∏è Otomatik Kategori ve Meta Alan G√ºncelleme")
st.markdown("---")

# Kullanƒ±cƒ± giri≈ü kontrol√º
if "authentication_status" not in st.session_state or not st.session_state.get("authentication_status"):
    st.warning("‚ö†Ô∏è L√ºtfen √∂nce giri≈ü yapƒ±n.")
    st.stop()

username = st.session_state.get("username", "guest")

# API anahtarlarƒ±nƒ± y√ºkle
user_keys = config_manager.load_all_user_keys(username)

if not user_keys.get("shopify_store") or not user_keys.get("shopify_token"):
    st.error("‚ùå Shopify API bilgileri eksik! L√ºtfen Settings sayfasƒ±ndan ekleyin.")
    st.stop()

# Bilgilendirme
st.info("""
### üéØ Bu Mod√ºl Ne Yapar?

**Sorun:** Shopify'da her √ºr√ºn i√ßin kategori ve meta alanlarƒ±nƒ± manuel doldurmak √ßok zaman alƒ±yor.

**√á√∂z√ºm:** Bu mod√ºl √ºr√ºn ba≈ülƒ±klarƒ±ndan otomatik olarak:
1. üì¶ **Kategori tespit eder** (T-shirt, Elbise, Bluz, Pantolon, ≈ûort vb.)
2. üè∑Ô∏è **Kategoriye uygun meta alanlarƒ± belirler** (Yaka tipi, Kol tipi, Boy, Desen vb.)
3. ‚ú® **√úr√ºn ba≈ülƒ±ƒüƒ±ndan deƒüerleri √ßƒ±karƒ±r** (V Yaka, Uzun Kol, Mini, Leopar vb.)
4. üíæ **Shopify'a otomatik yazar** (GraphQL API ile)

**√ñrnek:**
- Ba≈ülƒ±k: "B√ºy√ºk Beden Uzun Kollu V Yaka Leopar Desenli Diz √úst√º Elbise 285058"
- Kategori: **Elbise** ‚úÖ
- Meta Alanlar:
  - `custom.yaka_tipi` = "V Yaka" ‚úÖ
  - `custom.kol_tipi` = "Uzun Kol" ‚úÖ
  - `custom.boy` = "Diz √úst√º" ‚úÖ
  - `custom.desen` = "Leopar" ‚úÖ
""")

st.markdown("---")

# Kategori istatistikleri g√∂ster
st.markdown("### üìä Desteklenen Kategoriler ve Meta Alanlarƒ±")

col1, col2 = st.columns([1, 2])

with col1:
    category_summary = CategoryMetafieldManager.get_category_summary()
    
    summary_data = []
    for category, count in category_summary.items():
        summary_data.append({
            'Kategori': category,
            'Meta Alan Sayƒ±sƒ±': count
        })
    
    st.dataframe(summary_data, use_container_width=True, hide_index=True)

with col2:
    selected_category = st.selectbox(
        "Kategori Detaylarƒ±",
        options=list(category_summary.keys())
    )
    
    if selected_category:
        metafields = CategoryMetafieldManager.get_metafields_for_category(selected_category)
        
        st.markdown(f"**{selected_category}** kategorisi i√ßin meta alanlar:")
        for field_key, field_info in metafields.items():
            st.markdown(f"- `{field_info['key']}`: {field_info['description']}")

st.markdown("---")

# G√ºncelleme Ayarlarƒ±
st.markdown("### ‚öôÔ∏è G√ºncelleme Ayarlarƒ±")

col1, col2, col3 = st.columns(3)

with col1:
    test_mode = st.checkbox("üß™ Test Modu (ƒ∞lk 20 √ºr√ºn)", value=True)
    
with col2:
    dry_run = st.checkbox("üîç DRY RUN (Sadece g√∂ster, g√ºncelleme)", value=True)

with col3:
    update_category = st.checkbox("üì¶ Kategori g√ºncelle", value=True)
    update_metafields = st.checkbox("üè∑Ô∏è Meta alanlarƒ± g√ºncelle", value=True)

st.markdown("---")

# √ñnizleme Butonu
if st.button("üëÅÔ∏è √ñnizleme Yap", type="secondary"):
    with st.spinner("√úr√ºnler y√ºkleniyor ve analiz ediliyor..."):
        try:
            shopify_api = ShopifyAPI(
                user_keys["shopify_store"],
                user_keys["shopify_token"]
            )
            
            # √úr√ºnleri y√ºkle
            shopify_api.load_all_products_for_cache()
            
            # Unique √ºr√ºnleri al
            unique_products = {}
            for product_data in shopify_api.product_cache.values():
                gid = product_data.get('gid')
                if gid and gid not in unique_products:
                    unique_products[gid] = product_data
            
            products = list(unique_products.values())[:20 if test_mode else len(unique_products)]
            
            st.success(f"‚úÖ {len(products)} √ºr√ºn y√ºklendi")
            
            # √ñnizleme tablosu
            preview_data = []
            
            for product in products[:10]:  # ƒ∞lk 10 √ºr√ºn√º g√∂ster
                title = product.get('title', '')
                gid = product.get('gid', '')
                
                # Kategori tespit
                category = CategoryMetafieldManager.detect_category(title)
                
                if category:
                    # Meta alanlarƒ± hazƒ±rla
                    metafields = CategoryMetafieldManager.prepare_metafields_for_shopify(category, title)
                    
                    metafield_summary = ', '.join([f"{mf['key']}: {mf['value']}" for mf in metafields])
                    
                    preview_data.append({
                        '√úr√ºn': title[:50] + '...' if len(title) > 50 else title,
                        'Kategori': category,
                        'Meta Alanlar': metafield_summary if metafield_summary else 'Yok'
                    })
                else:
                    preview_data.append({
                        '√úr√ºn': title[:50] + '...' if len(title) > 50 else title,
                        'Kategori': '‚ùå Tespit edilemedi',
                        'Meta Alanlar': '-'
                    })
            
            st.dataframe(preview_data, use_container_width=True, hide_index=True)
            
            # ƒ∞statistikler
            total_with_category = sum(1 for p in products if CategoryMetafieldManager.detect_category(p.get('title', '')))
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Toplam √úr√ºn", len(products))
            with col2:
                st.metric("Kategori Tespit Edildi", total_with_category)
            with col3:
                st.metric("Ba≈üarƒ± Oranƒ±", f"{(total_with_category/len(products)*100):.1f}%")
            
        except Exception as e:
            st.error(f"‚ùå Hata: {str(e)}")

# G√ºncelleme Butonu
st.markdown("---")

if st.button("üöÄ G√ºncellemeyi Ba≈ülat", type="primary", disabled=(not update_category and not update_metafields)):
    if dry_run:
        st.warning("‚ö†Ô∏è DRY RUN modu aktif - Deƒüi≈üiklikler Shopify'a yazƒ±lmayacak")
    
    with st.spinner("G√ºncelleme yapƒ±lƒ±yor..."):
        try:
            shopify_api = ShopifyAPI(
                user_keys["shopify_store"],
                user_keys["shopify_token"]
            )
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # √úr√ºnleri y√ºkle
            status_text.text("üì¶ √úr√ºnler y√ºkleniyor...")
            shopify_api.load_all_products_for_cache()
            
            # Unique √ºr√ºnleri al
            unique_products = {}
            for product_data in shopify_api.product_cache.values():
                gid = product_data.get('gid')
                if gid and gid not in unique_products:
                    unique_products[gid] = product_data
            
            products = list(unique_products.values())[:20 if test_mode else len(unique_products)]
            
            status_text.text(f"‚úÖ {len(products)} √ºr√ºn y√ºklendi")
            
            # Sonu√ßlar
            stats = {
                'total': len(products),
                'updated': 0,
                'skipped': 0,
                'failed': 0
            }
            
            results_container = st.container()
            
            with results_container:
                st.markdown("### üìä G√ºncelleme Sonu√ßlarƒ±:")
                results_placeholder = st.empty()
                
                results_html = ""
                
                for idx, product in enumerate(products):
                    gid = product.get('gid')
                    title = product.get('title', 'Bilinmeyen')
                    
                    progress = (idx + 1) / len(products)
                    progress_bar.progress(progress)
                    status_text.text(f"[{idx + 1}/{len(products)}] {title[:50]}...")
                    
                    # Kategori tespit
                    category = CategoryMetafieldManager.detect_category(title)
                    
                    if not category:
                        stats['skipped'] += 1
                        results_html += f"""
                        <div style='padding: 8px; margin: 3px 0; border-left: 3px solid #ffc107; background: #fff8e1;'>
                            <small>‚è≠Ô∏è Kategori tespit edilemedi: <b>{title[:60]}</b></small>
                        </div>
                        """
                        results_placeholder.markdown(results_html, unsafe_allow_html=True)
                        continue
                    
                    # Meta alanlarƒ± hazƒ±rla
                    metafields = CategoryMetafieldManager.prepare_metafields_for_shopify(category, title)
                    
                    if dry_run:
                        # DRY RUN: Sadece g√∂ster
                        stats['updated'] += 1
                        metafield_list = ', '.join([f"{mf['key']}: {mf['value']}" for mf in metafields])
                        
                        results_html += f"""
                        <div style='padding: 8px; margin: 3px 0; border-left: 3px solid #2196f3; background: #e3f2fd;'>
                            <small>üîç <b>{title[:60]}</b></small><br>
                            <small>&nbsp;&nbsp;&nbsp;&nbsp;Kategori: <b>{category}</b> | Meta: {metafield_list}</small>
                        </div>
                        """
                    else:
                        # GER√áEK G√úNCELLEME
                        try:
                            result = shopify_api.update_product_category_and_metafields(
                                gid,
                                category if update_category else None,
                                metafields if update_metafields else []
                            )
                            
                            if result.get('success'):
                                stats['updated'] += 1
                                results_html += f"""
                                <div style='padding: 8px; margin: 3px 0; border-left: 3px solid #4caf50; background: #e8f5e9;'>
                                    <small>‚úÖ <b>{title[:60]}</b></small><br>
                                    <small>&nbsp;&nbsp;&nbsp;&nbsp;Kategori: <b>{category}</b> | Meta: {len(metafields)} alan g√ºncellendi</small>
                                </div>
                                """
                            else:
                                stats['failed'] += 1
                                results_html += f"""
                                <div style='padding: 8px; margin: 3px 0; border-left: 3px solid #f44336; background: #ffebee;'>
                                    <small>‚ùå <b>{title[:60]}</b></small><br>
                                    <small>&nbsp;&nbsp;&nbsp;&nbsp;Hata: {result.get('message', 'Bilinmeyen')}</small>
                                </div>
                                """
                            
                            time.sleep(0.5)  # Rate limit
                            
                        except Exception as e:
                            stats['failed'] += 1
                            results_html += f"""
                            <div style='padding: 8px; margin: 3px 0; border-left: 3px solid #f44336; background: #ffebee;'>
                                <small>‚ùå <b>{title[:60]}</b></small><br>
                                <small>&nbsp;&nbsp;&nbsp;&nbsp;Hata: {str(e)}</small>
                            </div>
                            """
                    
                    results_placeholder.markdown(results_html, unsafe_allow_html=True)
            
            # √ñzet
            st.markdown("---")
            st.markdown("### üìä √ñzet:")
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Toplam", stats['total'])
            with col2:
                st.metric("G√ºncellendi", stats['updated'])
            with col3:
                st.metric("Atlandƒ±", stats['skipped'])
            with col4:
                st.metric("Hata", stats['failed'])
            
            if dry_run:
                st.warning("üí° DRY RUN moduydu - Ger√ßek g√ºncelleme i√ßin DRY RUN'ƒ± kapatƒ±p tekrar √ßalƒ±≈ütƒ±rƒ±n.")
            elif stats['updated'] > 0:
                st.success(f"‚úÖ {stats['updated']} √ºr√ºn ba≈üarƒ±yla g√ºncellendi!")
            
            progress_bar.progress(1.0)
            status_text.text("‚úÖ Tamamlandƒ±!")
            
        except Exception as e:
            st.error(f"‚ùå Hata: {str(e)}")
            import traceback
            with st.expander("Detaylƒ± Hata"):
                st.code(traceback.format_exc())

# Yardƒ±m b√∂l√ºm√º
with st.expander("‚ùì Yardƒ±m ve ƒ∞pu√ßlarƒ±"):
    st.markdown("""
    ### Kategori Tespit Kurallarƒ±
    
    Sistem √ºr√ºn ba≈ülƒ±ƒüƒ±nda ≈üu anahtar kelimeleri arar:
    
    - **Elbise:** elbise, dress
    - **T-shirt:** t-shirt, tshirt, ti≈ü√∂rt
    - **Bluz:** bluz, blouse, g√∂mlek
    - **Pantolon:** pantolon, pants, jean, kot
    - **≈ûort:** ≈üort, short
    - **Etek:** etek, skirt
    - **Ceket:** ceket, jacket, mont, kaban
    - Ve daha fazlasƒ±...
    
    ### Meta Alan √áƒ±karma
    
    Ba≈ülƒ±ktan otomatik √ßƒ±karƒ±lan deƒüerler:
    
    - **Yaka:** V yaka, Bisiklet yaka, Hakim yaka vb.
    - **Kol:** Uzun kol, Kƒ±sa kol, Kolsuz vb.
    - **Boy:** Mini, Midi, Maxi, Diz √ºst√º vb.
    - **Desen:** Leopar, √ái√ßekli, D√ºz, √áizgili vb.
    - **Pa√ßa:** Dar pa√ßa, Bol pa√ßa vb.
    - **Bel:** Y√ºksek bel, Normal bel vb.
    
    ### ƒ∞pu√ßlarƒ±
    
    1. ‚úÖ ƒ∞lk √∂nce **Test Modu** ve **DRY RUN** ile deneyin
    2. ‚úÖ √ñnizleme yaparak sonu√ßlarƒ± kontrol edin
    3. ‚úÖ √úr√ºn ba≈ülƒ±klarƒ±nƒ±n a√ßƒ±klayƒ±cƒ± olmasƒ± √∂nemli
    4. ‚úÖ Kategori tespit edilemezse ba≈ülƒ±ƒüƒ± d√ºzenleyin
    """)
