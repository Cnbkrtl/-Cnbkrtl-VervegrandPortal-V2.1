"""
üè∑Ô∏è Otomatik Kategori ve Meta Alan Y√∂netim Sistemi

√úr√ºn ba≈ülƒ±ƒüƒ±ndan otomatik kategori tespiti ve kategori bazlƒ± meta alanlarƒ±nƒ± doldurur.
Shopify'da manuel i≈ülem yapmadan kategori ve meta alanlarƒ±nƒ± otomatik g√ºnceller.
"""

import re
import logging
from typing import Dict, List, Optional, Tuple

# Varyant helper fonksiyonlarƒ±nƒ± import et
try:
    from .variant_helpers import get_color_list_as_string
except ImportError:
    # Eƒüer relative import √ßalƒ±≈ümazsa, absolute import dene
    try:
        from utils.variant_helpers import get_color_list_as_string
    except ImportError:
        # Son √ßare: fonksiyonu burada tanƒ±mla
        def get_color_list_as_string(variants, separator=', '):
            """Fallback: Varyantlardan renk listesi √ßƒ±kar"""
            if not variants:
                return None
            colors = set()
            for variant in variants:
                for option in variant.get('options', []):
                    if option.get('name', '').lower() in ['color', 'renk', 'colour']:
                        color = option.get('value')
                        if color:
                            colors.add(color)
            return separator.join(sorted(list(colors))) if colors else None

class CategoryMetafieldManager:
    """
    Kategori tespit ve meta alan y√∂netimi i√ßin merkezi sƒ±nƒ±f.
    """
    
    # Kategori tespit i√ßin anahtar kelimeler (√∂ncelik sƒ±rasƒ±na g√∂re)
    # √ñNEMLƒ∞: Daha spesifik kelimeler √ºstte olmalƒ±!
    CATEGORY_KEYWORDS = {
        'Sweatshirt': ['sweatshirt', 'sweat', 'hoodie'],
        'T-shirt': ['t-shirt', 'tshirt', 'ti≈ü√∂rt', 'tisort'],
        'Elbise': ['elbise', 'dress'],
        'Bluz': ['bluz', 'blouse'],
        'G√∂mlek': ['g√∂mlek', 'shirt', 'tunik g√∂mlek'],
        'Pantolon': ['pantolon', 'pants', 'jean', 'kot'],
        'Jogger': ['jogger', 'jogging'],
        'E≈üofman Altƒ±': ['e≈üofman altƒ±', 'e≈üofman alt', 'esofman alt', 'tracksuit bottom'],
        'Tayt': ['tayt', 'legging', '„É¨„ÇÆ„É≥„Çπ'],
        '≈ûort': ['≈üort', 'sort', 'short', 'bermuda'],
        'Etek': ['etek', 'skirt'],
        'Ceket': ['ceket', 'jacket', 'blazer'],
        'Mont': ['mont', 'coat', 'parka', 'tren√ßkot', 'trench'],
        'Kaban': ['kaban', 'palto', 'overcoat'],
        'Kazak': ['kazak', 'sweater', 'pullover', 'boƒüazlƒ±', 'balƒ±k√ßƒ± yaka'],
        'Hƒ±rka': ['hƒ±rka', 'hirka', 'cardigan'],
        'S√ºveter': ['s√ºveter', 'suveter', 'triko'],
        'Tunik': ['tunik', 'tunic'],
        'Yelek': ['yelek', 'vest'],
        '≈ûal': ['≈üal', 'sal', 'scarf', 'atkƒ±', 'atki', 'e≈üarp'],
        'Takƒ±m': ['takƒ±m', 'takim', 'suit', 'set', 'ikili'],
        'Mayo': ['mayo', 'bikini', 'swimsuit', 'deniz'],
        'Gecelik': ['gecelik', 'pijama', 'nightgown', 'uyku'],
        'Tulum': ['tulum', 'jumpsuit', 'overall', 'salopet']
    }
    
    # Her kategori i√ßin meta alan ≈üablonlarƒ±
    # Shopify'daki standart meta alanlarƒ±na g√∂re d√ºzenlenmi≈ütir
    CATEGORY_METAFIELDS = {
        'Elbise': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.yaka_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'yaka_tipi',
                'description': 'Yaka tipi (V yaka, Bisiklet yaka, Halter vb.)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Kƒ±sa kol, Uzun kol, Kolsuz vb.)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Elbise boyu (Mini, Midi, Maxi, Diz √ºst√º vb.)'
            },
            'custom.desen': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'desen',
                'description': 'Desen (√ái√ßekli, D√ºz, Leopar, √áizgili vb.)'
            },
            'custom.kullanim_alani': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kullanim_alani',
                'description': 'Kullanƒ±m alanƒ± (G√ºnl√ºk, Gece, Kokteyl vb.)'
            }
        },
        'T-shirt': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.yaka_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'yaka_tipi',
                'description': 'Yaka tipi (V yaka, Bisiklet yaka, Polo vb.)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Kƒ±sa kol, Uzun kol vb.)'
            },
            'custom.desen': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'desen',
                'description': 'Desen (Baskƒ±lƒ±, D√ºz, √áizgili vb.)'
            }
        },
        'Bluz': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.yaka_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'yaka_tipi',
                'description': 'Yaka tipi (V yaka, Hakim yaka, G√∂mlek yaka vb.)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Kƒ±sa kol, Uzun kol, 3/4 kol vb.)'
            },
            'custom.desen': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'desen',
                'description': 'Desen'
            }
        },
        'Pantolon': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.pacha_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'pacha_tipi',
                'description': 'Pa√ßa tipi (Dar pa√ßa, Bol pa√ßa, ƒ∞spanyol pa√ßa vb.)'
            },
            'custom.bel_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'bel_tipi',
                'description': 'Bel tipi (Y√ºksek bel, Normal bel, D√º≈ü√ºk bel vb.)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Pantolon boyu (Uzun, 7/8, Capri vb.)'
            }
        },
        '≈ûort': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': '≈ûort boyu (Mini, Midi, Bermuda vb.)'
            },
            'custom.bel_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'bel_tipi',
                'description': 'Bel tipi (Y√ºksek bel, Normal bel vb.)'
            }
        },
        'Etek': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Etek boyu (Mini, Midi, Maxi vb.)'
            },
            'custom.model': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'model',
                'description': 'Model (Kalem, Pileli, A kesim vb.)'
            }
        },
        'Ceket': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol vb.)'
            },
            'custom.kapanma_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kapanma_tipi',
                'description': 'Kapanma tipi (Fermuarlƒ±, D√ºƒümeli, √áƒ±t√ßƒ±tlƒ± vb.)'
            }
        },
        'Mont': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol vb.)'
            },
            'custom.kapanma_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kapanma_tipi',
                'description': 'Kapanma tipi (Fermuarlƒ±, D√ºƒümeli, √áƒ±t√ßƒ±tlƒ± vb.)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Mont boyu (Kƒ±sa, Orta, Uzun vb.)'
            },
            'custom.kapusonlu': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kapusonlu',
                'description': 'Kap√º≈üon durumu (Kap√º≈üonlu, Kap√º≈üonsuz)'
            }
        },
        'G√∂mlek': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.yaka_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'yaka_tipi',
                'description': 'Yaka tipi (Klasik, Hakim, ƒ∞talyan vb.)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol vb.)'
            },
            'custom.desen': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'desen',
                'description': 'Desen (D√ºz, √áizgili, Kareli vb.)'
            }
        },
        'Hƒ±rka': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol, Kolsuz vb.)'
            },
            'custom.kapanma_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kapanma_tipi',
                'description': 'Kapanma tipi (D√ºƒümeli, A√ßƒ±k, Fermuarlƒ± vb.)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Hƒ±rka boyu (Kƒ±sa, Orta, Uzun vb.)'
            }
        },
        'Sweatshirt': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol vb.)'
            },
            'custom.kapusonlu': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kapusonlu',
                'description': 'Kap√º≈üon durumu (Kap√º≈üonlu, Kap√º≈üonsuz)'
            },
            'custom.desen': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'desen',
                'description': 'Desen (Baskƒ±lƒ±, D√ºz, Logolu vb.)'
            }
        },
        'Kazak': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.yaka_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'yaka_tipi',
                'description': 'Yaka tipi (Boƒüazlƒ±, V yaka, Bisiklet yaka, Balƒ±k√ßƒ± vb.)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol vb.)'
            },
            'custom.desen': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'desen',
                'description': 'Desen (D√ºz, √ñrg√º, Desenli vb.)'
            }
        },
        'S√ºveter': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.yaka_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'yaka_tipi',
                'description': 'Yaka tipi (Boƒüazlƒ±, V yaka, Bisiklet yaka vb.)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol vb.)'
            }
        },
        'Jogger': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.bel_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'bel_tipi',
                'description': 'Bel tipi (Lastikli, ƒ∞pli vb.)'
            },
            'custom.pacha_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'pacha_tipi',
                'description': 'Pa√ßa tipi (Dar pa√ßa, Lastikli pa√ßa vb.)'
            },
            'custom.cep': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'cep',
                'description': 'Cep √∂zellikleri (Cepli, Cepsiz vb.)'
            }
        },
        'E≈üofman Altƒ±': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.bel_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'bel_tipi',
                'description': 'Bel tipi (Lastikli, ƒ∞pli vb.)'
            },
            'custom.pacha_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'pacha_tipi',
                'description': 'Pa√ßa tipi (Dar pa√ßa, Bol pa√ßa, Lastikli pa√ßa vb.)'
            },
            'custom.kullanim_alani': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kullanim_alani',
                'description': 'Kullanƒ±m alanƒ± (Spor, G√ºnl√ºk vb.)'
            }
        },
        'Tayt': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.bel_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'bel_tipi',
                'description': 'Bel tipi (Y√ºksek bel, Normal bel vb.)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Tayt boyu (Uzun, 7/8, Capri vb.)'
            },
            'custom.kullanim_alani': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kullanim_alani',
                'description': 'Kullanƒ±m alanƒ± (Spor, G√ºnl√ºk vb.)'
            }
        },
        'Tunik': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.yaka_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'yaka_tipi',
                'description': 'Yaka tipi (V yaka, Hakim yaka, Bisiklet yaka vb.)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol vb.)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Tunik boyu (Kƒ±sa, Orta, Uzun vb.)'
            }
        },
        'Tulum': {
            'custom.renk': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'renk',
                'description': 'Renk (Varyantlardan otomatik doldurulur)'
            },
            'custom.kol_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'kol_tipi',
                'description': 'Kol tipi (Uzun kol, Kƒ±sa kol, Kolsuz vb.)'
            },
            'custom.pacha_tipi': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'pacha_tipi',
                'description': 'Pa√ßa tipi (Dar, Bol, ƒ∞spanyol vb.)'
            },
            'custom.boy': {
                'type': 'single_line_text_field',
                'namespace': 'custom',
                'key': 'boy',
                'description': 'Tulum boyu (Uzun, 7/8, ≈ûort vb.)'
            }
        }
    }
    
    @staticmethod
    def detect_category(product_title: str) -> Optional[str]:
        """
        √úr√ºn ba≈ülƒ±ƒüƒ±ndan kategori tespit eder.
        
        Args:
            product_title: √úr√ºn ba≈ülƒ±ƒüƒ±
            
        Returns:
            Tespit edilen kategori veya None
        """
        if not product_title:
            return None
        
        title_lower = product_title.lower()
        
        # √ñncelik sƒ±rasƒ±na g√∂re kontrol et
        for category, keywords in CategoryMetafieldManager.CATEGORY_KEYWORDS.items():
            for keyword in keywords:
                if keyword.lower() in title_lower:
                    logging.info(f"Kategori tespit edildi: '{category}' (Anahtar: '{keyword}')")
                    return category
        
        logging.warning(f"'{product_title}' i√ßin kategori tespit edilemedi")
        return None
    
    @staticmethod
    def extract_metafield_values(
        product_title: str, 
        category: str,
        product_description: str = "",
        variants: List[Dict] = None,
        shopify_recommendations: Dict = None
    ) -> Dict[str, str]:
        """
        üîç √áOK KATMANLI META ALAN √áIKARMA Sƒ∞STEMƒ∞
        
        4 Katmanlƒ± Veri Kaynaƒüƒ± (√ñncelik Sƒ±rasƒ±na G√∂re):
        1. Shopify √ñnerileri (En y√ºksek √∂ncelik - Shopify'ƒ±n AI √∂nerileri)
        2. Varyant Bilgileri (Renk, Beden, Materyal se√ßenekleri)
        3. √úr√ºn Ba≈ülƒ±ƒüƒ± (Regex pattern matching ile detaylƒ± analiz)
        4. √úr√ºn A√ßƒ±klamasƒ± (Ba≈ülƒ±kta bulunamayanlar i√ßin)
        
        Args:
            product_title: √úr√ºn ba≈ülƒ±ƒüƒ±
            category: Tespit edilen kategori
            product_description: √úr√ºn a√ßƒ±klamasƒ± (HTML olabilir)
            variants: √úr√ºn varyantlarƒ± [{title, options: [{name, value}]}]
            shopify_recommendations: Shopify'ƒ±n √∂nerdiƒüi attribute'ler
            
        Returns:
            Meta alan deƒüerleri (key: value)
        """
        values = {}
        title_lower = product_title.lower()
        desc_lower = product_description.lower() if product_description else ""
        
        # Ortak kalƒ±plar (Geni≈ületilmi≈ü + √ñncelikli Sƒ±ralama)
        patterns = {
            'yaka_tipi': [
                (r'boƒüazlƒ±\s*yaka', 'Boƒüazlƒ± Yaka'),
                (r'boƒüazlƒ±', 'Boƒüazlƒ±'),
                (r'v\s*yaka', 'V Yaka'),
                (r'v\-yaka', 'V Yaka'),
                (r'bisiklet\s*yaka', 'Bisiklet Yaka'),
                (r'hakim\s*yaka', 'Hakim Yaka'),
                (r'polo\s*yaka', 'Polo Yaka'),
                (r'balƒ±k√ßƒ±\s*yaka', 'Balƒ±k√ßƒ± Yaka'),
                (r'balƒ±k√ßƒ±', 'Balƒ±k√ßƒ± Yaka'),
                (r'halter\s*yaka', 'Halter'),
                (r'halter', 'Halter'),
                (r'kayƒ±k\s*yaka', 'Kayƒ±k Yaka'),
                (r'g√∂mlek\s*yaka', 'G√∂mlek Yaka'),
                (r'klasik\s*yaka', 'Klasik Yaka'),
                (r'yuvarlak\s*yaka', 'Yuvarlak Yaka'),
                (r'kare\s*yaka', 'Kare Yaka'),
                (r'askƒ±lƒ±', 'Askƒ±lƒ±'),
                (r'straplez', 'Straplez'),
                (r'tek\s*omuz', 'Tek Omuz'),
            ],
            'kol_tipi': [
                (r'uzun\s*kol', 'Uzun Kol'),
                (r'kƒ±sa\s*kol', 'Kƒ±sa Kol'),
                (r'kolsuz', 'Kolsuz'),
                (r'3/4\s*kol', '3/4 Kol'),
                (r'yarƒ±m\s*kol', 'Yarƒ±m Kol'),
                (r'balon\s*kol', 'Balon Kol'),
                (r'fƒ±rfƒ±rlƒ±\s*kol', 'Fƒ±rfƒ±rlƒ± Kol'),
                (r'volan\s*kol', 'Volan Kol'),
                (r'd√º≈ü√ºk\s*omuz', 'D√º≈ü√ºk Omuz'),
            ],
            'boy': [
                (r'maxi\s*boy', 'Maxi'),
                (r'maxi', 'Maxi'),
                (r'midi\s*boy', 'Midi'),
                (r'midi', 'Midi'),
                (r'mini\s*boy', 'Mini'),
                (r'mini', 'Mini'),
                (r'diz\s*√ºst', 'Diz √úst√º'),
                (r'diz\s*alt', 'Diz Altƒ±'),
                (r'bilekli', 'Bilekli'),
                (r'uzun\s*boy', 'Uzun'),
                (r'orta\s*boy', 'Orta'),
                (r'kƒ±sa\s*boy', 'Kƒ±sa'),
            ],
            'desen': [
                (r'leopar\s*desen', 'Leopar'),
                (r'leopar', 'Leopar'),
                (r'√ßi√ßek\s*desen', '√ái√ßekli'),
                (r'√ßi√ßekli', '√ái√ßekli'),
                (r'√ßi√ßek', '√ái√ßekli'),
                (r'desenli', 'Desenli'),
                (r'd√ºz\s*renk', 'D√ºz'),
                (r'd√ºz', 'D√ºz'),
                (r'√ßizgi\s*desen', '√áizgili'),
                (r'√ßizgili', '√áizgili'),
                (r'baskƒ±\s*desen', 'Baskƒ±lƒ±'),
                (r'baskƒ±lƒ±', 'Baskƒ±lƒ±'),
                (r'logolu', 'Logolu'),
                (r'puantiye\s*desen', 'Puantiyeli'),
                (r'puantiyeli', 'Puantiyeli'),
                (r'kareli', 'Kareli'),
                (r'√∂rg√º\s*desen', '√ñrg√º'),
                (r'√∂rg√º', '√ñrg√º'),
                (r'jakarlƒ±', 'Jakarlƒ±'),
                (r'geometrik', 'Geometrik'),
                (r'soyut', 'Soyut'),
            ],
            'pacha_tipi': [
                (r'dar\s*pa√ßa', 'Dar Pa√ßa'),
                (r'bol\s*pa√ßa', 'Bol Pa√ßa'),
                (r'ispanyol\s*pa√ßa', 'ƒ∞spanyol Pa√ßa'),
                (r'd√ºz\s*pa√ßa', 'D√ºz Pa√ßa'),
                (r'lastikli\s*pa√ßa', 'Lastikli Pa√ßa'),
                (r'wide\s*leg', 'Bol Pa√ßa'),
                (r'skinny', 'Dar Pa√ßa'),
            ],
            'bel_tipi': [
                (r'y√ºksek\s*bel', 'Y√ºksek Bel'),
                (r'normal\s*bel', 'Normal Bel'),
                (r'd√º≈ü√ºk\s*bel', 'D√º≈ü√ºk Bel'),
                (r'lastikli\s*bel', 'Lastikli'),
                (r'ipli\s*bel', 'ƒ∞pli'),
                (r'kemer\s*detaylƒ±', 'Kemerli'),
            ],
            'kapanma_tipi': [
                (r'fermuarlƒ±', 'Fermuarlƒ±'),
                (r'fermuar', 'Fermuarlƒ±'),
                (r'd√ºƒümeli', 'D√ºƒümeli'),
                (r'd√ºƒüme', 'D√ºƒümeli'),
                (r'√ßƒ±t√ßƒ±tlƒ±', '√áƒ±t√ßƒ±tlƒ±'),
                (r'√ßƒ±t√ßƒ±t', '√áƒ±t√ßƒ±tlƒ±'),
                (r'a√ßƒ±k\s*model', 'A√ßƒ±k'),
                (r'√∂nden\s*a√ßƒ±k', '√ñnden A√ßƒ±k'),
            ],
            'kapusonlu': [
                (r'kap√º≈üonlu', 'Kap√º≈üonlu'),
                (r'kapusonlu', 'Kap√º≈üonlu'),
                (r'hoodie', 'Kap√º≈üonlu'),
            ],
            'kullanim_alani': [
                (r'spor', 'Spor'),
                (r'g√ºnl√ºk', 'G√ºnl√ºk'),
                (r'gece', 'Gece'),
                (r'kokteyl', 'Kokteyl'),
                (r'casual', 'G√ºnl√ºk'),
                (r'ofis', 'Ofis'),
                (r'i≈ü', 'ƒ∞≈ü'),
                (r'd√ºƒü√ºn', 'D√ºƒü√ºn'),
                (r'√∂zel\s*g√ºn', '√ñzel G√ºn'),
            ],
            'cep': [
                (r'cepli', 'Cepli'),
                (r'cepsiz', 'Cepsiz'),
            ],
            'model': [
                (r'kalem\s*etek', 'Kalem'),
                (r'kalem', 'Kalem'),
                (r'pileli', 'Pileli'),
                (r'a\s*kesim', 'A Kesim'),
                (r'balon', 'Balon'),
                (r'saten', 'Saten'),
                (r'volanlƒ±', 'Volanlƒ±'),
            ],
            'kuma≈ü': [
                # Kuma≈ü tipleri (varyantlardan veya a√ßƒ±klamadan)
                (r'pamuklu', 'Pamuklu'),
                (r'pamuk', 'Pamuklu'),
                (r'viskon', 'Viskon'),
                (r'polyester', 'Polyester'),
                (r'likralƒ±', 'Likralƒ±'),
                (r'likra', 'Likralƒ±'),
                (r'denim', 'Denim'),
                (r'kot', 'Denim'),
                (r'jean', 'Denim'),
                (r'saten', 'Saten'),
                (r'kadife', 'Kadife'),
                (r'triko', 'Triko'),
                (r'√∂rme', '√ñrme'),
                (r'dokuma', 'Dokuma'),
                (r'≈üifon', '≈ûifon'),
                (r'krep', 'Krep'),
            ],
            'stil': [
                (r'oversize', 'Oversize'),
                (r'slim\s*fit', 'Slim Fit'),
                (r'regular\s*fit', 'Regular Fit'),
                (r'loose', 'Bol Kesim'),
                (r'fitted', 'V√ºcuda Oturan'),
                (r'boyfriend', 'Boyfriend'),
                (r'mom', 'Mom'),
                (r'vintage', 'Vintage'),
                (r'retro', 'Retro'),
            ]
        }
        
        # ============================================
        # KATMAN 1: SHOPIFY √ñNERƒ∞LERƒ∞NDEN AL (EN Y√úKSEK √ñNCELƒ∞K)
        # ============================================
        if shopify_recommendations:
            recommended_attrs = shopify_recommendations.get('recommended_attributes', [])
            
            # recommended_attrs bir liste of strings'dir (√∂rn: ["Collar Type", "Sleeve Length"])
            # Bu attribute isimleri sadece hangi alanlarƒ±n √∂nemli olduƒüunu g√∂sterir
            # Deƒüerleri ba≈ülƒ±k, varyant veya a√ßƒ±klamadan √ßƒ±karacaƒüƒ±z
            
            # ≈ûimdilik Shopify attribute isimlerini logla (gelecekte API'den deƒüer de alabiliriz)
            if recommended_attrs:
                logging.info(f"‚ú® Shopify √∂nerilen attribute'ler: {', '.join(recommended_attrs)}")
                # Not: Shopify sadece attribute ismi √∂neriyor, deƒüer √∂nermiyor
                # Deƒüerleri diƒüer katmanlardan (varyant, ba≈ülƒ±k, a√ßƒ±klama) √ßƒ±karacaƒüƒ±z
        
        # ============================================
        # KATMAN 2: VARYANT Bƒ∞LGƒ∞LERƒ∞NDEN AL
        # ============================================
        if variants:
            # Renk bilgisini √ßƒ±kar (zaten get_color_list_as_string var)
            color_value = get_color_list_as_string(variants)
            if color_value and 'renk' not in values:
                values['renk'] = color_value
                logging.info(f"üé® Varyantlardan renk √ßƒ±karƒ±ldƒ±: '{color_value}'")
            
            # Diƒüer varyant se√ßeneklerini de kontrol et
            for variant in variants:
                options = variant.get('options', [])
                for option in options:
                    option_name = option.get('name', '').lower()
                    option_value = option.get('value', '')
                    
                    # Beden/Size
                    if option_name in ['size', 'beden', 'boyut'] and 'beden' not in values:
                        # Varyantlardan beden listesi √ßƒ±kar
                        sizes = set()
                        for v in variants:
                            for opt in v.get('options', []):
                                if opt.get('name', '').lower() in ['size', 'beden', 'boyut']:
                                    sizes.add(opt.get('value', ''))
                        if sizes:
                            values['beden'] = ', '.join(sorted(list(sizes)))
                            logging.info(f"üìè Varyantlardan beden √ßƒ±karƒ±ldƒ±: '{values['beden']}'")
                    
                    # Kuma≈ü/Material
                    if option_name in ['material', 'kuma≈ü', 'kuma≈ü tipi', 'fabric'] and 'kuma≈ü' not in values:
                        values['kuma≈ü'] = option_value
                        logging.info(f"üßµ Varyantlardan kuma≈ü √ßƒ±karƒ±ldƒ±: '{option_value}'")
        
        # ============================================
        # KATMAN 3: BA≈ûLIKTAN REGEX ƒ∞LE √áIKAR
        # ============================================
        for field, pattern_list in patterns.items():
            if field not in values:  # Sadece hen√ºz dolmamƒ±≈ü alanlarƒ± doldur
                for pattern, value in pattern_list:
                    if re.search(pattern, title_lower):
                        values[field] = value
                        logging.info(f"üìù Ba≈ülƒ±ktan √ßƒ±karƒ±ldƒ±: {field} = '{value}'")
                        break  # ƒ∞lk e≈üle≈ümeyi al
        
        # ============================================
        # KATMAN 4: A√áIKLAMADAN √áIKAR (SON √áARE)
        # ============================================
        if desc_lower:
            for field, pattern_list in patterns.items():
                if field not in values:  # Sadece hen√ºz dolmamƒ±≈ü alanlarƒ± doldur
                    for pattern, value in pattern_list:
                        if re.search(pattern, desc_lower):
                            values[field] = value
                            logging.info(f"üìÑ A√ßƒ±klamadan √ßƒ±karƒ±ldƒ±: {field} = '{value}'")
                            break  # ƒ∞lk e≈üle≈ümeyi al
        
        return values
    
    @staticmethod
    def get_metafields_for_category(category: str) -> Dict[str, dict]:
        """
        Belirtilen kategori i√ßin meta alan ≈üablonlarƒ±nƒ± d√∂nd√ºr√ºr.
        
        Args:
            category: Kategori adƒ±
            
        Returns:
            Meta alan ≈üablonlarƒ±
        """
        return CategoryMetafieldManager.CATEGORY_METAFIELDS.get(category, {})
    
    @staticmethod
    @staticmethod
    def prepare_metafields_for_shopify(
        category: str, 
        product_title: str,
        product_description: str = "",
        variants: List[Dict] = None,
        shopify_recommendations: Dict = None
    ) -> List[Dict]:
        """
        Shopify GraphQL i√ßin metafield input formatƒ±nƒ± hazƒ±rlar.
        
        Args:
            category: √úr√ºn kategorisi
            product_title: √úr√ºn ba≈ülƒ±ƒüƒ±
            product_description: √úr√ºn a√ßƒ±klamasƒ±
            variants: √úr√ºn varyantlarƒ± (renk bilgisi i√ßin)
            shopify_recommendations: Shopify AI √∂nerileri
            
        Returns:
            Shopify metafield input listesi
        """
        metafield_templates = CategoryMetafieldManager.get_metafields_for_category(category)
        
        # üåü UPGRADED: T√ºm veri kaynaklarƒ±nƒ± kullan
        extracted_values = CategoryMetafieldManager.extract_metafield_values(
            product_title=product_title,
            category=category,
            product_description=product_description,
            variants=variants,
            shopify_recommendations=shopify_recommendations
        )
        
        shopify_metafields = []
        
        for field_key, template in metafield_templates.items():
            # Meta alan key'ini √ßƒ±kar (custom.yaka_tipi -> yaka_tipi)
            key = template['key']
            
            # √áƒ±karƒ±lan deƒüerler i√ßinde varsa kullan
            if key in extracted_values:
                value = extracted_values[key]
                
                shopify_metafields.append({
                    'namespace': template['namespace'],
                    'key': template['key'],
                    'value': value,
                    'type': template['type']
                })
                
                logging.info(f"Shopify metafield hazƒ±rlandƒ±: {template['namespace']}.{template['key']} = '{value}'")
        
        return shopify_metafields
    
    @staticmethod
    def get_category_summary() -> Dict[str, int]:
        """
        Kategori istatistiklerini d√∂nd√ºr√ºr.
        
        Returns:
            Kategori adƒ± ve meta alan sayƒ±sƒ±
        """
        summary = {}
        for category, metafields in CategoryMetafieldManager.CATEGORY_METAFIELDS.items():
            summary[category] = len(metafields)
        return summary


# Kullanƒ±m √∂rneƒüi
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    # Test
    test_titles = [
        "B√ºy√ºk Beden Uzun Kollu Leopar Desenli Diz √úst√º Elbise 285058",
        "B√ºy√ºk Beden Bisiklet Yaka Yarƒ±m Kollu D√ºz Renk T-shirt 303734",
        "B√ºy√ºk Beden V Yaka Kƒ±sa Kol √ái√ßekli Bluz 256478",
        "B√ºy√ºk Beden Y√ºksek Bel Dar Pa√ßa Siyah Pantolon 123456"
    ]
    
    for title in test_titles:
        print(f"\n{'='*60}")
        print(f"√úr√ºn: {title}")
        print(f"{'='*60}")
        
        # Kategori tespit
        category = CategoryMetafieldManager.detect_category(title)
        print(f"Kategori: {category}")
        
        if category:
            # Meta alanlarƒ± hazƒ±rla
            metafields = CategoryMetafieldManager.prepare_metafields_for_shopify(category, title)
            print(f"\nOlu≈üturulan Meta Alanlar ({len(metafields)}):")
            for mf in metafields:
                print(f"  - {mf['namespace']}.{mf['key']} = '{mf['value']}'")
